{"ast":null,"code":"import { createElementVNode as _createElementVNode, createVNode as _createVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, normalizeStyle as _normalizeStyle, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"summary\"\n};\nconst _hoisted_2 = {\n  class: \"box\"\n};\nconst _hoisted_3 = {\n  class: \"parti-wrap\"\n};\nconst _hoisted_4 = {\n  class: \"rate\"\n};\nconst _hoisted_5 = {\n  class: \"participants\"\n};\nconst _hoisted_6 = {\n  class: \"progress\"\n};\nconst _hoisted_7 = {\n  class: \"flex-wrap\"\n};\nconst _hoisted_8 = {\n  class: \"left\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[5] || (_cache[5] = _createElementVNode(\"h1\", {\n    class: \"sub-title\"\n  }, \"Today's Reservation\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_1, [_createVNode($setup[\"card\"], {\n    title: '금일 이벤트 수',\n    number: $setup.todayData.length\n  }, null, 8 /* PROPS */, [\"number\"]), _createElementVNode(\"div\", _hoisted_2, [_cache[1] || (_cache[1] = _createElementVNode(\"h3\", {\n    class: \"box-title\"\n  }, \"이벤트 참여 인원\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, _toDisplayString($setup.participationRate) + \"%\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"span\", null, _toDisplayString($setup.totalParticipants), 1 /* TEXT */), _cache[0] || (_cache[0] = _createTextVNode(\" / \")), _createElementVNode(\"span\", null, _toDisplayString($setup.totalCapacity), 1 /* TEXT */)])]), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", {\n    class: \"progress-bar\",\n    style: _normalizeStyle({\n      width: $setup.participationRate + '%'\n    })\n  }, null, 4 /* STYLE */)])]), _createVNode($setup[\"card\"], {\n    title: \"금일 예약 완료\",\n    number: $setup.totalReservations\n  }, null, 8 /* PROPS */, [\"number\"]), _createVNode($setup[\"card\"], {\n    title: \"취소 요청건\",\n    number: $setup.cancelRequests,\n    isRed: true\n  }, null, 8 /* PROPS */, [\"number\"])]), _createElementVNode(\"div\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"h1\", {\n    class: \"sub-title\"\n  }, \"금일 이벤트 현황\", -1 /* HOISTED */)), _createElementVNode(\"table\", null, [_createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.headers, (header, index) => {\n    return _openBlock(), _createElementBlock(\"th\", {\n      key: index\n    }, _toDisplayString(header), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.todayData, (row, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, _toDisplayString(row.venue), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(row.time), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(row.eventName), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(row.capacity), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(row.cancelled), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(row.capacity - row.reservations), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [_cache[3] || (_cache[3] = _createElementVNode(\"h1\", {\n    class: \"sub-title\"\n  }, \"금일 취소 현황\", -1 /* HOISTED */)), _createVNode($setup[\"CancelTable\"])]), _cache[4] || (_cache[4] = _createElementVNode(\"div\", {\n    class: \"right\"\n  }, [_createElementVNode(\"h1\", {\n    class: \"sub-title\"\n  }, \"일자별 예약율 (7일)\"), _createElementVNode(\"canvas\", {\n    id: \"reservationsChart\"\n  }), _createCommentVNode(\" 차트를 표시할 캔버스 \")], -1 /* HOISTED */))])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createElementVNode","_hoisted_1","_createVNode","$setup","title","number","todayData","length","_hoisted_2","_hoisted_3","_hoisted_4","_toDisplayString","participationRate","_hoisted_5","totalParticipants","_createTextVNode","totalCapacity","_hoisted_6","style","_normalizeStyle","width","totalReservations","cancelRequests","isRed","_Fragment","_renderList","headers","header","index","key","row","venue","time","eventName","capacity","cancelled","reservations","_hoisted_7","_hoisted_8","id","_createCommentVNode"],"sources":["C:\\Users\\bs010\\portfolioVan\\vue-first\\dashboard\\src\\components\\pages\\HomePage.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1 class=\"sub-title\">Today's Reservation</h1>\r\n      <div class=\"summary\">\r\n        <card :title=\"'금일 이벤트 수'\" :number=\"todayData.length\" />\r\n        <div class=\"box\">\r\n          <h3 class=\"box-title\">이벤트 참여 인원</h3>\r\n          <div class=\"parti-wrap\">\r\n            <div class=\"rate\">{{ participationRate }}%</div>\r\n            <div class=\"participants\">\r\n              <span>{{ totalParticipants }}</span> / <span>{{ totalCapacity }}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"progress\">\r\n            <div class=\"progress-bar\" :style=\"{ width: participationRate + '%' }\"></div>\r\n          </div>\r\n        </div>\r\n        <card title=\"금일 예약 완료\" :number=\"totalReservations\" />\r\n        <card title=\"취소 요청건\" :number=\"cancelRequests\" :isRed=\"true\" />\r\n      </div>\r\n    \r\n      <div>\r\n        <h1 class=\"sub-title\">금일 이벤트 현황</h1>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th v-for=\"(header, index) in headers\" :key=\"index\">{{ header }}</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"(row, index) in todayData\" :key=\"index\">\r\n              <td>{{ row.venue }}</td>\r\n              <td>{{ row.time }}</td>\r\n              <td>{{ row.eventName }}</td>\r\n              <td>{{ row.capacity }}</td>\r\n              <td>{{ row.cancelled }}</td>\r\n              <td>{{ row.capacity - row.reservations }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n  \r\n      <div class=\"flex-wrap\">\r\n          <div class=\"left\">\r\n              <h1 class=\"sub-title\">금일 취소 현황</h1>\r\n              <CancelTable/>\r\n          </div>\r\n          <div class=\"right\">\r\n              <h1 class=\"sub-title\">일자별 예약율 (7일)</h1>\r\n              <canvas id=\"reservationsChart\"></canvas> <!-- 차트를 표시할 캔버스 -->\r\n          </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref, onMounted, computed } from 'vue';\r\n  import card from '../compo/CardCompo.vue';\r\n  import data from '../../assets/data/reserve.json'; // reserve.json 파일\r\n  import CancelTable from '../compo/CancelTable.vue';\r\n  import { Chart } from 'chart.js'; // Chart.js 라이브러리 불러오기\r\n  \r\n  const todayData = ref([]);\r\n  const headers = ref(['장소', '시간', '이벤트명', '수용 인원', '취소 요청', '잔여 좌석']);\r\n  const last7DaysData = ref([]); // 최근 7일 데이터\r\n  \r\n  const today = new Date().toISOString().split('T')[0];\r\n  \r\n  // 최근 7일의 데이터 필터터\r\n  const getLast7DaysData = () => {\r\n    const todayDate = new Date();\r\n    const last7Days = [];\r\n  \r\n    for (let i = 0; i < 7; i++) {\r\n      const date = new Date(todayDate);\r\n      date.setDate(todayDate.getDate() - i);\r\n      const formattedDate = date.toISOString().split('T')[0];\r\n      last7Days.push(formattedDate);\r\n    }\r\n  \r\n    last7DaysData.value = data.filter(item => last7Days.includes(item.date));\r\n  };\r\n  \r\n  // 날짜별 장소별 예약율 계산\r\n  const calculateDailyVenueReservationRate = () => {\r\n    const dailyRates = {};\r\n  \r\n    last7DaysData.value.forEach(item => {\r\n      const date = item.date;\r\n      const venue = item.venue;\r\n      const reservationRate = (item.reservations / item.capacity) * 100;\r\n  \r\n      if (!dailyRates[date]) {\r\n        dailyRates[date] = {};\r\n      }\r\n      if (!dailyRates[date][venue]) {\r\n        dailyRates[date][venue] = [];\r\n      }\r\n  \r\n      dailyRates[date][venue].push(reservationRate);\r\n    });\r\n  \r\n    // 각 날짜에 2개 이상 예약이 있으면 평균치로 계산\r\n    const averageRates = {};\r\n    Object.keys(dailyRates).forEach(date => {\r\n      averageRates[date] = {};\r\n      Object.keys(dailyRates[date]).forEach(venue => {\r\n        const rates = dailyRates[date][venue];\r\n        const averageRate = rates.reduce((a, b) => a + b, 0) / rates.length;\r\n        averageRates[date][venue] = averageRate;\r\n      });\r\n    });\r\n  \r\n    return averageRates;\r\n  };\r\n  \r\n  // 차트 데이터 생성\r\n  const chartData = computed(() => {\r\n    const dailyVenueRates = calculateDailyVenueReservationRate();\r\n    const dates = Object.keys(dailyVenueRates); \r\n    const venues = Array.from(new Set(data.map(item => item.venue))); \r\n  \r\n    const colorPalette = [\r\n    '#FDECE3', // 연두색\r\n    'rgba(153, 102, 255, 1)', // 보라색\r\n    'rgba(255, 159, 64, 1)', // 주황색\r\n    'rgba(255, 99, 132, 1)', // 빨간색\r\n    'rgba(54, 162, 235, 1)', // 파란색\r\n    'rgba(255, 205, 86, 1)', // 노란색\r\n    'rgba(201, 203, 207, 1)', // 회색\r\n  ];\r\n\r\n    const datasets = venues.map((venue, index) => {\r\n        return {\r\n        label: venue,\r\n        data: dates.map(date => dailyVenueRates[date][venue] || 0), // 날짜별 예약율\r\n        borderColor: colorPalette[index % colorPalette.length], // 색상 배열에서 색상 선택\r\n        backgroundColor: colorPalette[index % colorPalette.length].replace('1)', '0.2)'), // 배경색은 투명도를 낮추기\r\n        fill: true,\r\n        };\r\n    });\r\n  \r\n    return {\r\n      labels: dates, // 가로축 = 7일일\r\n      datasets: datasets,\r\n    };\r\n  });\r\n  \r\n  onMounted(() => {\r\n    todayData.value = data.filter(item => item.date === today);\r\n    getLast7DaysData(); \r\n  \r\n    const ctx = document.getElementById('reservationsChart').getContext('2d');\r\n    new Chart(ctx, {\r\n      type: 'line',\r\n      data: chartData.value,\r\n      options: {\r\n        responsive: true,\r\n        scales: {\r\n          x: {\r\n            beginAtZero: true,\r\n          },\r\n          y: {\r\n            beginAtZero: true,\r\n            max: 100, // 예약율을 기준으로 할거라 세로(Y)축은 100%를 기준으로로\r\n          }\r\n        }\r\n      }\r\n    });\r\n  });\r\n  \r\n  const totalParticipants = computed(() => {\r\n    return todayData.value.reduce((total, row) => total + row.reservations, 0);\r\n  });\r\n  \r\n  const totalCapacity = computed(() => {\r\n    return todayData.value.reduce((total, row) => total + row.capacity, 0);\r\n  });\r\n  \r\n  const totalReservations = computed(() => {\r\n    return todayData.value.reduce((total, row) => total + row.reservations, 0);\r\n  });\r\n  \r\n  const cancelRequests = computed(() => {\r\n    return todayData.value.reduce((total, row) => total + (row.capacity - row.reservations), 0);\r\n  });\r\n  \r\n  const participationRate = computed(() => {\r\n    return totalCapacity.value === 0 ? 0 : Math.round((totalParticipants.value / totalCapacity.value) * 100);\r\n  });\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .flex-wrap {\r\n    display: flex;\r\n    gap: 20px;\r\n  }\r\n  \r\n  .summary {\r\n    display: flex;\r\n    gap: 15px;\r\n  }\r\n  \r\n  .parti-wrap {\r\n    display: flex;\r\n    gap: 10px;\r\n    padding-bottom: 10px;\r\n  }\r\n  \r\n  .rate {\r\n    flex: 1;\r\n    width: 60px;\r\n    height: 60px;\r\n    line-height: 60px;\r\n    border-radius: 100%;\r\n    background-color: orange;\r\n    text-align: center;\r\n    color: white;\r\n  }\r\n  \r\n  .participants {\r\n    line-height: 60px;\r\n  }\r\n  \r\n  .progress {\r\n    width: 80%;\r\n    height: 15px;\r\n    border-radius: 15px;\r\n    background-color: #ccc;\r\n    position: relative;\r\n  }\r\n  \r\n  .progress-bar {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    height: 15px;\r\n    border-radius: 15px;\r\n    border: thin solid #ccc;\r\n    background-color: orange;\r\n    width: 80%;\r\n  }\r\n  \r\n  canvas {\r\n    width: 100%;\r\n    height: 400px;\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}