{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport { ref, onMounted, computed } from 'vue';\nimport card from '../compo/CardCompo.vue';\nimport data from '../../assets/data/reserve.json'; // reserve.json 파일\nimport CancelTable from '../compo/CancelTable.vue';\nimport { Chart } from 'chart.js'; // Chart.js 라이브러리 불러오기\n\nexport default {\n  __name: 'HomePage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const todayData = ref([]);\n    const headers = ref(['장소', '시간', '이벤트명', '수용 인원', '취소 요청', '잔여 좌석']);\n    const last7DaysData = ref([]); // 최근 7일 데이터\n\n    const today = new Date().toISOString().split('T')[0];\n\n    // 최근 7일의 데이터를 필터링하는 함수\n    const getLast7DaysData = () => {\n      const todayDate = new Date();\n      const last7Days = [];\n\n      // 오늘부터 7일 간의 데이터만 필터링\n      for (let i = 0; i < 7; i++) {\n        const date = new Date(todayDate);\n        date.setDate(todayDate.getDate() - i);\n        const formattedDate = date.toISOString().split('T')[0];\n        last7Days.push(formattedDate);\n      }\n\n      // 최근 7일 데이터를 찾기\n      last7DaysData.value = data.filter(item => last7Days.includes(item.date));\n    };\n\n    // 장소별 예약율 계산\n    const calculateVenueReservationRate = () => {\n      const venueRates = {};\n      last7DaysData.value.forEach(item => {\n        const venue = item.venue;\n        const reservationRate = item.reservations / item.capacity * 100;\n\n        // 해당 장소에 데이터가 있으면 예약율을 추가하고, 없으면 새로 추가\n        if (venueRates[venue]) {\n          venueRates[venue].push(reservationRate);\n        } else {\n          venueRates[venue] = [reservationRate];\n        }\n      });\n\n      // 각 장소의 평균 예약율을 계산\n      const averageRates = {};\n      Object.keys(venueRates).forEach(venue => {\n        const rates = venueRates[venue];\n        const averageRate = rates.reduce((a, b) => a + b, 0) / rates.length;\n        averageRates[venue] = averageRate;\n      });\n      return averageRates;\n    };\n\n    // 차트 데이터 생성\n    const chartData = computed(() => {\n      const venueReservationRates = calculateVenueReservationRate();\n      const venues = Object.keys(venueReservationRates);\n      const rates = venues.map(venue => venueReservationRates[venue]);\n      return {\n        labels: venues,\n        // 장소별로 x축에 표시\n        datasets: [{\n          label: '예약율 (%)',\n          data: rates,\n          // 계산된 예약율 데이터\n          borderColor: 'rgba(75, 192, 192, 1)',\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          fill: true\n        }]\n      };\n    });\n    onMounted(() => {\n      todayData.value = data.filter(item => item.date === today);\n      getLast7DaysData(); // 7일 간의 데이터를 가져옴\n\n      // 차트 렌더링\n      const ctx = document.getElementById('reservationsChart').getContext('2d');\n      new Chart(ctx, {\n        type: 'line',\n        data: chartData.value,\n        options: {\n          responsive: true,\n          scales: {\n            x: {\n              beginAtZero: true\n            },\n            y: {\n              beginAtZero: true,\n              max: 100 // 세로축의 최대값을 100%로 설정\n            }\n          }\n        }\n      });\n    });\n    const totalParticipants = computed(() => {\n      return todayData.value.reduce((total, row) => total + row.reservations, 0);\n    });\n    const totalCapacity = computed(() => {\n      return todayData.value.reduce((total, row) => total + row.capacity, 0);\n    });\n    const totalReservations = computed(() => {\n      return todayData.value.reduce((total, row) => total + row.reservations, 0);\n    });\n    const cancelRequests = computed(() => {\n      return todayData.value.reduce((total, row) => total + (row.capacity - row.reservations), 0);\n    });\n    const participationRate = computed(() => {\n      return totalCapacity.value === 0 ? 0 : Math.round(totalParticipants.value / totalCapacity.value * 100);\n    });\n    const __returned__ = {\n      todayData,\n      headers,\n      last7DaysData,\n      today,\n      getLast7DaysData,\n      calculateVenueReservationRate,\n      chartData,\n      totalParticipants,\n      totalCapacity,\n      totalReservations,\n      cancelRequests,\n      participationRate,\n      ref,\n      onMounted,\n      computed,\n      card,\n      get data() {\n        return data;\n      },\n      CancelTable,\n      get Chart() {\n        return Chart;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","card","data","CancelTable","Chart","todayData","headers","last7DaysData","today","Date","toISOString","split","getLast7DaysData","todayDate","last7Days","i","date","setDate","getDate","formattedDate","push","value","filter","item","includes","calculateVenueReservationRate","venueRates","forEach","venue","reservationRate","reservations","capacity","averageRates","Object","keys","rates","averageRate","reduce","a","b","length","chartData","venueReservationRates","venues","map","labels","datasets","label","borderColor","backgroundColor","fill","ctx","document","getElementById","getContext","type","options","responsive","scales","x","beginAtZero","y","max","totalParticipants","total","row","totalCapacity","totalReservations","cancelRequests","participationRate","Math","round"],"sources":["C:/Users/bs010/portfolioVan/vue-first/dashboard/src/components/pages/HomePage.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1 class=\"sub-title\">Today's Reservation</h1>\r\n      <div class=\"summary\">\r\n        <card :title=\"'금일 이벤트 수'\" :number=\"todayData.length\" />\r\n        <div class=\"box\">\r\n          <h3 class=\"box-title\">이벤트 참여 인원</h3>\r\n          <div class=\"parti-wrap\">\r\n            <div class=\"rate\">{{ participationRate }}%</div>\r\n            <div class=\"participants\">\r\n              <span>{{ totalParticipants }}</span> / <span>{{ totalCapacity }}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"progress\">\r\n            <div class=\"progress-bar\" :style=\"{ width: participationRate + '%' }\"></div>\r\n          </div>\r\n        </div>\r\n        <card title=\"금일 예약 완료\" :number=\"totalReservations\" />\r\n        <card title=\"취소 요청건\" :number=\"cancelRequests\" :isRed=\"true\" />\r\n      </div>\r\n    \r\n      <div>\r\n        <h1 class=\"sub-title\">금일 이벤트 현황</h1>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th v-for=\"(header, index) in headers\" :key=\"index\">{{ header }}</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"(row, index) in todayData\" :key=\"index\">\r\n              <td>{{ row.venue }}</td>\r\n              <td>{{ row.time }}</td>\r\n              <td>{{ row.eventName }}</td>\r\n              <td>{{ row.capacity }}</td>\r\n              <td>{{ row.cancelled }}</td>\r\n              <td>{{ row.capacity - row.reservations }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n  \r\n      <div class=\"flex-wrap\">\r\n          <div class=\"left\">\r\n              <h1 class=\"sub-title\">금일 취소 현황</h1>\r\n              <CancelTable/>\r\n          </div>\r\n          <div class=\"right\">\r\n              <h1 class=\"sub-title\">일자별 예약율 (7일)</h1>\r\n              <canvas id=\"reservationsChart\"></canvas> <!-- 차트를 표시할 캔버스 -->\r\n          </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref, onMounted, computed } from 'vue';\r\n  import card from '../compo/CardCompo.vue';\r\n  import data from '../../assets/data/reserve.json'; // reserve.json 파일\r\n  import CancelTable from '../compo/CancelTable.vue';\r\n  import { Chart } from 'chart.js'; // Chart.js 라이브러리 불러오기\r\n  \r\n  const todayData = ref([]);\r\n  const headers = ref(['장소', '시간', '이벤트명', '수용 인원', '취소 요청', '잔여 좌석']);\r\n  const last7DaysData = ref([]); // 최근 7일 데이터\r\n  \r\n  const today = new Date().toISOString().split('T')[0];\r\n  \r\n  // 최근 7일의 데이터를 필터링하는 함수\r\n  const getLast7DaysData = () => {\r\n    const todayDate = new Date();\r\n    const last7Days = [];\r\n  \r\n    // 오늘부터 7일 간의 데이터만 필터링\r\n    for (let i = 0; i < 7; i++) {\r\n      const date = new Date(todayDate);\r\n      date.setDate(todayDate.getDate() - i);\r\n      const formattedDate = date.toISOString().split('T')[0];\r\n      last7Days.push(formattedDate);\r\n    }\r\n  \r\n    // 최근 7일 데이터를 찾기\r\n    last7DaysData.value = data.filter(item => last7Days.includes(item.date));\r\n  };\r\n  \r\n  // 장소별 예약율 계산\r\n  const calculateVenueReservationRate = () => {\r\n    const venueRates = {};\r\n  \r\n    last7DaysData.value.forEach(item => {\r\n      const venue = item.venue;\r\n      const reservationRate = (item.reservations / item.capacity) * 100;\r\n  \r\n      // 해당 장소에 데이터가 있으면 예약율을 추가하고, 없으면 새로 추가\r\n      if (venueRates[venue]) {\r\n        venueRates[venue].push(reservationRate);\r\n      } else {\r\n        venueRates[venue] = [reservationRate];\r\n      }\r\n    });\r\n  \r\n    // 각 장소의 평균 예약율을 계산\r\n    const averageRates = {};\r\n    Object.keys(venueRates).forEach(venue => {\r\n      const rates = venueRates[venue];\r\n      const averageRate = rates.reduce((a, b) => a + b, 0) / rates.length;\r\n      averageRates[venue] = averageRate;\r\n    });\r\n  \r\n    return averageRates;\r\n  };\r\n  \r\n  // 차트 데이터 생성\r\n  const chartData = computed(() => {\r\n    const venueReservationRates = calculateVenueReservationRate();\r\n    const venues = Object.keys(venueReservationRates);\r\n    const rates = venues.map(venue => venueReservationRates[venue]);\r\n  \r\n    return {\r\n      labels: venues, // 장소별로 x축에 표시\r\n      datasets: [{\r\n        label: '예약율 (%)',\r\n        data: rates, // 계산된 예약율 데이터\r\n        borderColor: 'rgba(75, 192, 192, 1)',\r\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n        fill: true,\r\n      }]\r\n    };\r\n  });\r\n  \r\n  onMounted(() => {\r\n    todayData.value = data.filter(item => item.date === today);\r\n    getLast7DaysData(); // 7일 간의 데이터를 가져옴\r\n  \r\n    // 차트 렌더링\r\n    const ctx = document.getElementById('reservationsChart').getContext('2d');\r\n    new Chart(ctx, {\r\n      type: 'line',\r\n      data: chartData.value,\r\n      options: {\r\n        responsive: true,\r\n        scales: {\r\n          x: {\r\n            beginAtZero: true,\r\n          },\r\n          y: {\r\n            beginAtZero: true,\r\n            max: 100, // 세로축의 최대값을 100%로 설정\r\n          }\r\n        }\r\n      }\r\n    });\r\n  });\r\n  \r\n  const totalParticipants = computed(() => {\r\n    return todayData.value.reduce((total, row) => total + row.reservations, 0);\r\n  });\r\n  \r\n  const totalCapacity = computed(() => {\r\n    return todayData.value.reduce((total, row) => total + row.capacity, 0);\r\n  });\r\n  \r\n  const totalReservations = computed(() => {\r\n    return todayData.value.reduce((total, row) => total + row.reservations, 0);\r\n  });\r\n  \r\n  const cancelRequests = computed(() => {\r\n    return todayData.value.reduce((total, row) => total + (row.capacity - row.reservations), 0);\r\n  });\r\n  \r\n  const participationRate = computed(() => {\r\n    return totalCapacity.value === 0 ? 0 : Math.round((totalParticipants.value / totalCapacity.value) * 100);\r\n  });\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .flex-wrap {\r\n    display: flex;\r\n    gap: 20px;\r\n  }\r\n  \r\n  .summary {\r\n    display: flex;\r\n    gap: 15px;\r\n  }\r\n  \r\n  .parti-wrap {\r\n    display: flex;\r\n    gap: 10px;\r\n    padding-bottom: 10px;\r\n  }\r\n  \r\n  .rate {\r\n    flex: 1;\r\n    width: 60px;\r\n    height: 60px;\r\n    line-height: 60px;\r\n    border-radius: 100%;\r\n    background-color: orange;\r\n    text-align: center;\r\n    color: white;\r\n  }\r\n  \r\n  .participants {\r\n    line-height: 60px;\r\n  }\r\n  \r\n  .progress {\r\n    width: 80%;\r\n    height: 15px;\r\n    border-radius: 15px;\r\n    background-color: #ccc;\r\n    position: relative;\r\n  }\r\n  \r\n  .progress-bar {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    height: 15px;\r\n    border-radius: 15px;\r\n    border: thin solid #ccc;\r\n    background-color: orange;\r\n    width: 80%;\r\n  }\r\n  \r\n  canvas {\r\n    width: 100%;\r\n    height: 400px;\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}